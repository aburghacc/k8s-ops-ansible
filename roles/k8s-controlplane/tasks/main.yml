- name: create kubernetes directory
  file:
    path: "{{ item }}"
    state: directory
    owner: kubernetes
    group: kubernetes
    mode: 0750
  with_items:
   - /etc/kubernetes
   - /etc/kubernetes/config
   - /var/lib/kubernetes
   - /var/run/kubernetes

# in case of upgrade restart components with notify handler
- name: download kubernetes control plane components
  get_url:
    url: "https://storage.googleapis.com/kubernetes-release/release/v{{kubernetes_version}}/bin/linux/amd64/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    owner: kubernetes
    group: kubernetes
    mode: 0750
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
    - kubectl

- name: copy certificates
  copy:
    src: "{{ pki_directory }}/{{ item }}"
    dest: /var/lib/kubernetes
    owner: kubernetes
    group: kubernetes
    mode: 0640
  with_items:
   - ca.pem
   - ca-key.pem
   - kubernetes-key.pem
   - kubernetes.pem
   - service-account-key.pem
   - service-account.pem

- name: copy configurations
  copy:
    src: "{{ cfg_directory }}/{{ item }}"
    dest: /var/lib/kubernetes
    owner: kubernetes
    group: kubernetes
    mode: 0640
  with_items:
   - encryption-config.yaml
   - kube-controller-manager.kubeconfig
   - kube-scheduler.kubeconfig

- name: create kube-apiserver service
  template:
    src: templates/kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
    mode: 0644
  notify:
    - reload systemd configs
    - restart kube-apiserver service

- name: create kube-controller-manager service
  copy:
    src: files/kube-controller-manager.service
    dest: /etc/systemd/system/kube-controller-manager.service
    mode: 0644
  notify:
    - reload systemd configs
    - restart kube-controller-manager service

- name: copy kube-scheduler configuration
  copy:
    src: files/kube-scheduler.yaml
    dest: /etc/kubernetes/config/kube-scheduler.yaml
    owner: kubernetes
    group: kubernetes
    mode: 0640

- name: create kube-scheduler service
  copy:
    src: files/kube-scheduler.service
    dest: /etc/systemd/system/kube-scheduler.service
    mode: 0644
  notify:
    - reload systemd configs
    - restart kube-scheduler service

- name: enable kubernetes controlplane services
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
    daemon_reload: yes
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: copy admin kubeconfig
  copy:
    src: "{{cfg_directory}}/admin.kubeconfig"
    dest: /root/admin.kubeconfig

- name: install python3-pip in order to install k8s ansible module (Ubuntu)
  apt:
    name: python3-pip
    state: present
  when: ansible_distribution == "Ubuntu"

- name: install epel-release in order to install python-pip (CentOS)
  yum:
    name: epel-release
    state: present
  when: ansible_distribution == "CentOS"

- name: install python-pip in order to install k8s ansible module (CentOS)
  yum:
    name: python-pip
    update_cache: yes
    state: present
  when: ansible_distribution == "CentOS"

- name: upgrade setuptools (CentOS)
  pip:
    name: setuptools
    version: 40.4.3
    state: present
  when: ansible_distribution == "CentOS"

- name: install required python modules for k8s ansible module
  pip:
    name: "{{ item }}"
    state: present
  with_items:
    - openshift
    - PyYAML

- name: copy k8s resources
  copy:
    src: "files/{{ item }}"
    dest: "/root/{{ item }}"
  with_items:
    - rbac-kube-apiserver.yaml
    - coredns.yaml
  # Only on first controller host
  run_once: true

- name: create kube-flannel configuration
  template:
    src: templates/kube-flannel.yml.j2
    dest: /root/kube-flannel.yml
  run_once: true

- name: apply k8s resources
  # At this stage we have a running API server, so deploy some yamls
  k8s:
    src: "/root/{{ item }}"
    kubeconfig: /root/admin.kubeconfig
    state: present
  with_items:
    - rbac-kube-apiserver.yaml
    - kube-flannel.yml
    - coredns.yaml
  run_once: true
